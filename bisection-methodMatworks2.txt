function bisection
% Bisection method: Used for solving an equation, and finding an
% approximate solution to an equation.
    clc
    % The number of bisection steps
    n = 32;
    % define the initial interval
    a = input('input a value for lower bound of the interval, a, ');
    b = input('input a value for upper bound of the interval, b, ');
    fprintf('\n initial interval [%g, %g] \n total bisection steps %d\n', a,b,n);
    % Check that a root does exist in the chosen interval
    x_left = a;
    x_right = b;
    f_left = f(x_left);
    f_right = f(x_right);
    if f_left*f_right > 0
    end
    % Bisection: The method
    for i=1:n
        if f_left == 0
            % The exact root of the equation is found at the lower bound
            % of the chosen interval
            fprintf('\n stage %g root %g with zero absolute error \n',i,x_left);
            return;
        end
        if f_right==0
            % The exact root of the equation is found at the upper bound
            % of the chosen interval
            fprintf('\n stage %g root %g with zero absolute error \n',i,x_right);
            return
        end
        % Bisection method: The process
        x_mid = (x_left+x_right)/2.0;
        f_mid = f(x_mid);
        if f_left*f_mid <= 0
            % There is a root in [x_left,x_mid]
            x_right = x_mid;
            f_right = f_mid;
        end
        if f_left*f_mid > 0
            % There is a root in [x_mid,x_right]
            x_left = x_mid;
            f_left = f_mid;
        end
        % Calculate the approximate root for current step
        root = (x_left+x_right)/2.0;
        % Calculate the absolute error for current step
        abs_err=(x_right-x_left)/2.0;
        fprintf('\n stage %g root %g absolute error < %g \n',i,root,abs_err);
    end
    %check satisfaction of equation at end of process
    residual = f(root);
    fprintf('\n final residual = %g \n',residual);
end
    % Subfunction: This defines the equation f(x)= 0
function f_value = f(~)
u = 7;
v = 0;
w = 1;
x = 9;
y = 0;
z = 2;
      k = v + 1;
n = (u./12) + 0.1;
U = 1 + ((w + 1)./((3.*x) + 1));
Pgrad = (-10.*(y + 1))./(z + 1);
f_value = nthroot((U.*((3.*n) + 1))./(n.*(nthroot((Pgrad./(-2.*k)),n))),(1 + (1./n)));
end